package main

import (
	"log"

	"time"

	// "github.com/briandowns/spinner"
	"github.com/go-resty/resty/v2"
	"github.com/tidwall/gjson"
)

func (user *User) NewKey() string {
	configuration := config{apikey: "***REMOVED***", googlekey: "***REMOVED***", siteurl: "discordapp.com"}

	captchaID := newSolve(configuration.apikey, configuration.googlekey, configuration.siteurl)
	log.Println("solveTest: ", captchaID)
	// s := spinner.New(spinner.CharSets[41], 100*time.Millisecond) // Build our new spinner
	// s.Start()                                                    // Start the spinner
	// s.Suffix = "       Waiting 15 seconds till we request captcha"
	// time.Sleep(15 * time.Second) // Run for some time to simulate work
	// s.Stop()

	code := getSolve(configuration.apikey, captchaID)
	// log.Println("id", code)
	return code
}
func newSolve(apiKey string, googlekey string, pageurl string) string {
	client := resty.New()
	client.SetQueryParam("key", apiKey)
	client.SetQueryParam("googlekey", googlekey)
	client.SetQueryParam("method", "userrecaptcha")
	client.SetQueryParam("pageurl", pageurl)
	client.SetQueryParam("json", "1")
	resp, err := client.R().Post("https://2captcha.com/in.php")
	if err != nil {
		log.Println(err)
	}
	log.Println(resp.String())

	// var r New
	// json.Unmarshal([]byte(resp.String()), &r)

	r := gjson.Get(resp.String(), "request")
	return r.String()
}
func getSolve(apiKey string, id string) string {
	client := resty.New()
	client.SetQueryParam("key", apiKey)
	client.SetQueryParam("id", id)
	client.SetQueryParam("action", "get")
	client.SetQueryParam("json", "1")
	// res := ""
	// resp, err := client.R().Get("https://2captcha.com/res.php")
	// if err != nil {
	// 	log.Println(err)

	// }
	// var r New
	// json.Unmarshal([]byte(resp.String()), &r)
	check := time.NewTicker(15 * time.Second)

	for {
		select {
		case <-check.C:
			resp, err := client.R().Get("https://2captcha.com/res.php")
			if err != nil {
				return ""
			}
			log.Println(resp.String())
			if gjson.Get(resp.String(), "status").Int() != 1 {
				log.Println("not ready")

			} else {
				r := gjson.Get(resp.String(), "request")
				log.Println(r.String())
				return r.String()
			}

			check = time.NewTicker(5 * time.Second)

		}
	}
	// if gjson.Get(resp.String(), "status").Int() != 1 {
	// 	log.Println("Error still not ready")
	// 	time.Sleep(5 * time.Second)
	// 	getSolve(apiKey, id)

	// } else {
	// 	log.Println("Solved captcha :D")
	// 	log.Println("Solved captcha :D")
	// 	r := gjson.Get(resp.String(), "request")
	// 	log.Println(r.String())
	// 	stuff := &res
	// 	*stuff = r.String()
	// 	return r.String()
	// }
	// return ""

}

// New Generated by https://quicktype.io
type New struct {
	Status  int64  `json:"status"`
	Request string `json:"request"`
}

// CodeKey captcha solve code
//type CodeKey struct {
//	RequestKey string
//	Time       int64
//}

type config struct {
	apikey    string
	googlekey string
	siteurl   string
}
