package main

import (
	"crypto/tls"
	"fmt"
	"log"

	"github.com/bxcodec/faker/v3"
	"github.com/go-resty/resty/v2"
	"github.com/mssola/user_agent"

	// "go.zoe.im/surferua"
	// 	    "github.com/mileusna/useragent"
	"github.com/tidwall/gjson"
)

func main() {
	fmt.Println("vim-go")
	createUser()

}
func createUser() {
	user := new(User)
	user.init()
	ua := user_agent.New("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36")

	log.Println(ua.Bot())
	// userp := &user

}

func (user *User) init() {

	user.grabCloudflare()
	user.details.username = faker.Username()
	user.details.password = faker.Password()

}
func (user *User) grabCloudflare() string {

	client := resty.New()
	client.SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})
	client.SetProxy("127.0.0.1:24000")
	client.SetHeader("User-Agent", user.auth.userAgent)
	resp, err := client.R().
		SetHeaders(map[string]string{
			"User-Agent":                user.auth.userAgent,
			"Accept":                    "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
			"Accept-Language":           "en-US,en;q=0.5",
			"DNT":                       "1",
			"Connection":                "keep-alive",
			"Upgrade-Insecure-Requests": "1",
			"Pragma":                    "no-cache",
			"Cache-Control":             "no-cache",
			"TE":                        "Trailers",
		}).
		Get("https://discordapp.com")
	if err != nil {
		log.Println(err)
	}
	// resp.Cookies()
	client.SetCookies(resp.Cookies())
	user.client = client

	return ""

}
func (user *User) fingerprint() string {
	client := user.client
	resp, err := client.R().
		SetHeaders(map[string]string{
			"User-Agent":      user.auth.userAgent,
			"Accept":          "*/*",
			"Accept-Language": "en-US,en;q=0.5",
			// "X-Track": auth.superProp,
			"DNT":        "1",
			"Connection": "keep-alive",
			"Referer":    "https://discordapp.com/",
			"TE":         "Trailers",
		}).
		Get("https://discordapp.com/api/v6/experiments")
	if err != nil {
		log.Println(err)
	}

	fingerprint := gjson.Get(resp.String(), "fingerprint")
	log.Println("fingerprint", fingerprint.String())
	user.auth.fingerprint = fingerprint.String()
	return ""
}
func (user *User) genUserAgent() {
	agent := "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"
	user.auth.userAgent = agent
	log.Println("Set useragent")
}

// func superProp(agent string) string {
// 	ua.Parse(agent)
// }
// func xTrack() string {

// }

func (user *User) register() {
	captcha := getCaptcha()
	realRegister := RegPayload{Fingerprint: user.auth.fingerprint, Email: user.details.email, Username: user.details.username, Password: user.details.password, Invite: nil, Consent: true, GiftCodeSkuID: nil, CAPTCHAKey: captcha}
	registerURL := "https://discordapp.com/api/v6/auth/register"
	client := user.client
	resp, err := client.R().
		SetBody(realRegister).
		SetHeaders(map[string]string{
			"Accept":          "*/*",
			"Accept-Language": "en-US,en;q=0.5",
			"DNT":             "1",
			"Connection":      "keep-alive",
			"Referer":         "https://discordapp.com/",
			"TE":              "Trailers",
		}).
		Post(registerURL)
	if err != nil {
		log.Println(err)
	}
	token := gjson.Get(resp.String(), "token").String()
	user.auth.token = token
	log.Println("set token in user to: ", token)

}

// Generated by https://quicktype.io

func getCaptcha() string {
	client := resty.New()
	resp, err := client.R().Get("localhost:8080")
	if err != nil {
		log.Println(err)
	}
	captcha := gjson.Get(resp.String(), "RequestKey")
	return captcha.String()
}

// RegPayload The payload used to register the account.
type RegPayload struct {
	Fingerprint   string      `json:"fingerprint"`
	Email         string      `json:"email"`
	Username      string      `json:"username"`
	Password      string      `json:"password"`
	Invite        interface{} `json:"invite"`
	Consent       bool        `json:"consent"`
	GiftCodeSkuID interface{} `json:"gift_code_sku_id"`
	CAPTCHAKey    string      `json:"captcha_key"`
}

type auth struct {
	fingerprint, cfuid, userAgent, token, superProp string
}

type userDetails struct {
	username, password, email string
}

// User Struct that defines the user
type User struct {
	details userDetails
	auth    auth
	client  *resty.Client
}
